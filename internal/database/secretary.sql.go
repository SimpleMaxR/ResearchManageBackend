// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: secretary.sql

package database

import (
	"context"
)

const createSecretary = `-- name: CreateSecretary :one
INSERT INTO secretaries (name, gender, age, mobilephone, emailaddress) VALUES ($1, $2, $3, $4, $5) RETURNING secretaryid
`

type CreateSecretaryParams struct {
	Name         string
	Gender       string
	Age          int32
	Mobilephone  string
	Emailaddress string
}

func (q *Queries) CreateSecretary(ctx context.Context, arg CreateSecretaryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSecretary,
		arg.Name,
		arg.Gender,
		arg.Age,
		arg.Mobilephone,
		arg.Emailaddress,
	)
	var secretaryid int32
	err := row.Scan(&secretaryid)
	return secretaryid, err
}

const createSecretaryService = `-- name: CreateSecretaryService :one
INSERT INTO secretaryservices (secretaryid, lab_id, employmentdate, responsibilities) VALUES ($1, $2, $3, $4) RETURNING secretaryid, lab_id, employmentdate, responsibilities
`

type CreateSecretaryServiceParams struct {
	Secretaryid      int32
	LabID            int32
	Employmentdate   string
	Responsibilities string
}

func (q *Queries) CreateSecretaryService(ctx context.Context, arg CreateSecretaryServiceParams) (Secretaryservice, error) {
	row := q.db.QueryRowContext(ctx, createSecretaryService,
		arg.Secretaryid,
		arg.LabID,
		arg.Employmentdate,
		arg.Responsibilities,
	)
	var i Secretaryservice
	err := row.Scan(
		&i.Secretaryid,
		&i.LabID,
		&i.Employmentdate,
		&i.Responsibilities,
	)
	return i, err
}

const deleteSecretary = `-- name: DeleteSecretary :exec
DELETE FROM secretaries WHERE secretaryid = $1
`

func (q *Queries) DeleteSecretary(ctx context.Context, secretaryid int32) error {
	_, err := q.db.ExecContext(ctx, deleteSecretary, secretaryid)
	return err
}

const deleteSecretaryService = `-- name: DeleteSecretaryService :exec
DELETE FROM secretaryservices WHERE secretaryid = $1
`

func (q *Queries) DeleteSecretaryService(ctx context.Context, secretaryid int32) error {
	_, err := q.db.ExecContext(ctx, deleteSecretaryService, secretaryid)
	return err
}

const listSecretaryAll = `-- name: ListSecretaryAll :many
SELECT secretaryid, name, gender, age, mobilephone, emailaddress FROM Secretaries
`

func (q *Queries) ListSecretaryAll(ctx context.Context) ([]Secretary, error) {
	rows, err := q.db.QueryContext(ctx, listSecretaryAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretary
	for rows.Next() {
		var i Secretary
		if err := rows.Scan(
			&i.Secretaryid,
			&i.Name,
			&i.Gender,
			&i.Age,
			&i.Mobilephone,
			&i.Emailaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretaryByID = `-- name: ListSecretaryByID :one
SELECT secretaryid, name, gender, age, mobilephone, emailaddress FROM Secretaries WHERE SecretaryID = $1
`

func (q *Queries) ListSecretaryByID(ctx context.Context, secretaryid int32) (Secretary, error) {
	row := q.db.QueryRowContext(ctx, listSecretaryByID, secretaryid)
	var i Secretary
	err := row.Scan(
		&i.Secretaryid,
		&i.Name,
		&i.Gender,
		&i.Age,
		&i.Mobilephone,
		&i.Emailaddress,
	)
	return i, err
}

const listSecretaryServiceByLab = `-- name: ListSecretaryServiceByLab :many
SELECT secretaryid, lab_id, employmentdate, responsibilities FROM SecretaryServices WHERE lab_id = $1
`

func (q *Queries) ListSecretaryServiceByLab(ctx context.Context, labID int32) ([]Secretaryservice, error) {
	rows, err := q.db.QueryContext(ctx, listSecretaryServiceByLab, labID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretaryservice
	for rows.Next() {
		var i Secretaryservice
		if err := rows.Scan(
			&i.Secretaryid,
			&i.LabID,
			&i.Employmentdate,
			&i.Responsibilities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretaryServiceBySID = `-- name: ListSecretaryServiceBySID :many
SELECT secretaryid, lab_id, employmentdate, responsibilities FROM SecretaryServices WHERE SecretaryID = $1
`

func (q *Queries) ListSecretaryServiceBySID(ctx context.Context, secretaryid int32) ([]Secretaryservice, error) {
	rows, err := q.db.QueryContext(ctx, listSecretaryServiceBySID, secretaryid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretaryservice
	for rows.Next() {
		var i Secretaryservice
		if err := rows.Scan(
			&i.Secretaryid,
			&i.LabID,
			&i.Employmentdate,
			&i.Responsibilities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
