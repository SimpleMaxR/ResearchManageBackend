// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: achieve.sql

package database

import (
	"context"
)

const createAchievement = `-- name: CreateAchievement :one

INSERT INTO achievements (name, obtaine, baseproject, basesubtopic, type) VALUES ($1, $2, $3, $4, $5)
RETURNING achievementid
`

type CreateAchievementParams struct {
	Name         string
	Obtaine      string
	Baseproject  int32
	Basesubtopic int32
	Type         int32
}

// achievements
func (q *Queries) CreateAchievement(ctx context.Context, arg CreateAchievementParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAchievement,
		arg.Name,
		arg.Obtaine,
		arg.Baseproject,
		arg.Basesubtopic,
		arg.Type,
	)
	var achievementid int32
	err := row.Scan(&achievementid)
	return achievementid, err
}

const deleteAchievement = `-- name: DeleteAchievement :exec
DELETE FROM achievements WHERE achievementid = $1
`

func (q *Queries) DeleteAchievement(ctx context.Context, achievementid int32) error {
	_, err := q.db.ExecContext(ctx, deleteAchievement, achievementid)
	return err
}

const listAchievementByProject = `-- name: ListAchievementByProject :many
SELECT achievementid, name, obtaine, baseproject, basesubtopic, type FROM achievements WHERE baseproject = $1
`

func (q *Queries) ListAchievementByProject(ctx context.Context, baseproject int32) ([]Achievement, error) {
	rows, err := q.db.QueryContext(ctx, listAchievementByProject, baseproject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Achievement
	for rows.Next() {
		var i Achievement
		if err := rows.Scan(
			&i.Achievementid,
			&i.Name,
			&i.Obtaine,
			&i.Baseproject,
			&i.Basesubtopic,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAchievementBySubtopic = `-- name: ListAchievementBySubtopic :many
SELECT achievementid, name, obtaine, baseproject, basesubtopic, type FROM achievements WHERE basesubtopic = $1
`

func (q *Queries) ListAchievementBySubtopic(ctx context.Context, basesubtopic int32) ([]Achievement, error) {
	rows, err := q.db.QueryContext(ctx, listAchievementBySubtopic, basesubtopic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Achievement
	for rows.Next() {
		var i Achievement
		if err := rows.Scan(
			&i.Achievementid,
			&i.Name,
			&i.Obtaine,
			&i.Baseproject,
			&i.Basesubtopic,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
