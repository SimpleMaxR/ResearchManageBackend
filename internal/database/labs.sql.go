// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: labs.sql

package database

import (
	"context"
	"database/sql"
)

const createLab = `-- name: CreateLab :one
INSERT INTO Laboratories (Name, office_area, Address, research_direction) VALUES ($1, $2, $3, $4) 
RETURNING lab_id, name, office_area, address, research_direction
`

type CreateLabParams struct {
	Name              string
	OfficeArea        float64
	Address           string
	ResearchDirection string
}

func (q *Queries) CreateLab(ctx context.Context, arg CreateLabParams) (Laboratory, error) {
	row := q.db.QueryRowContext(ctx, createLab,
		arg.Name,
		arg.OfficeArea,
		arg.Address,
		arg.ResearchDirection,
	)
	var i Laboratory
	err := row.Scan(
		&i.LabID,
		&i.Name,
		&i.OfficeArea,
		&i.Address,
		&i.ResearchDirection,
	)
	return i, err
}

const deleteLab = `-- name: DeleteLab :one
DELETE FROM Laboratories WHERE lab_id = $1
RETURNING lab_id, name, office_area, address, research_direction
`

func (q *Queries) DeleteLab(ctx context.Context, labID int32) (Laboratory, error) {
	row := q.db.QueryRowContext(ctx, deleteLab, labID)
	var i Laboratory
	err := row.Scan(
		&i.LabID,
		&i.Name,
		&i.OfficeArea,
		&i.Address,
		&i.ResearchDirection,
	)
	return i, err
}

const healthzDatabase = `-- name: HealthzDatabase :one
SELECT version()
`

func (q *Queries) HealthzDatabase(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, healthzDatabase)
	var version string
	err := row.Scan(&version)
	return version, err
}

const listDirectorByLab = `-- name: ListDirectorByLab :one
SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers WHERE lab_id = $1 AND Leader = true
`

func (q *Queries) ListDirectorByLab(ctx context.Context, labID int32) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, listDirectorByLab, labID)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const listLab = `-- name: ListLab :one
SELECT lab_id, name, office_area, address, research_direction FROM laboratories WHERE Name = $1
`

func (q *Queries) ListLab(ctx context.Context, name string) (Laboratory, error) {
	row := q.db.QueryRowContext(ctx, listLab, name)
	var i Laboratory
	err := row.Scan(
		&i.LabID,
		&i.Name,
		&i.OfficeArea,
		&i.Address,
		&i.ResearchDirection,
	)
	return i, err
}

const listLabAll = `-- name: ListLabAll :many
SELECT lab_id, name, office_area, address, research_direction FROM Laboratories
`

func (q *Queries) ListLabAll(ctx context.Context) ([]Laboratory, error) {
	rows, err := q.db.QueryContext(ctx, listLabAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Laboratory
	for rows.Next() {
		var i Laboratory
		if err := rows.Scan(
			&i.LabID,
			&i.Name,
			&i.OfficeArea,
			&i.Address,
			&i.ResearchDirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLabById = `-- name: ListLabById :one
SELECT lab_id, name, office_area, address, research_direction FROM laboratories WHERE lab_id = $1
`

func (q *Queries) ListLabById(ctx context.Context, labID int32) (Laboratory, error) {
	row := q.db.QueryRowContext(ctx, listLabById, labID)
	var i Laboratory
	err := row.Scan(
		&i.LabID,
		&i.Name,
		&i.OfficeArea,
		&i.Address,
		&i.ResearchDirection,
	)
	return i, err
}

const listLabByName = `-- name: ListLabByName :many
SELECT lab_id, name, office_area, address, research_direction FROM Laboratories WHERE Name LIKE '%' || $1 || '%'
`

func (q *Queries) ListLabByName(ctx context.Context, dollar_1 sql.NullString) ([]Laboratory, error) {
	rows, err := q.db.QueryContext(ctx, listLabByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Laboratory
	for rows.Next() {
		var i Laboratory
		if err := rows.Scan(
			&i.LabID,
			&i.Name,
			&i.OfficeArea,
			&i.Address,
			&i.ResearchDirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOfficeByLab = `-- name: ListOfficeByLab :one
SELECT officeid, lab_id, area, address, managerid FROM Offices WHERE lab_id = $1
`

func (q *Queries) ListOfficeByLab(ctx context.Context, labID int32) (Office, error) {
	row := q.db.QueryRowContext(ctx, listOfficeByLab, labID)
	var i Office
	err := row.Scan(
		&i.Officeid,
		&i.LabID,
		&i.Area,
		&i.Address,
		&i.Managerid,
	)
	return i, err
}

const updateLab = `-- name: UpdateLab :one
UPDATE Laboratories SET Name = $1, office_area = $2, Address = $3, research_direction = $4 WHERE lab_id = $5
RETURNING lab_id, name, office_area, address, research_direction
`

type UpdateLabParams struct {
	Name              string
	OfficeArea        float64
	Address           string
	ResearchDirection string
	LabID             int32
}

func (q *Queries) UpdateLab(ctx context.Context, arg UpdateLabParams) (Laboratory, error) {
	row := q.db.QueryRowContext(ctx, updateLab,
		arg.Name,
		arg.OfficeArea,
		arg.Address,
		arg.ResearchDirection,
		arg.LabID,
	)
	var i Laboratory
	err := row.Scan(
		&i.LabID,
		&i.Name,
		&i.OfficeArea,
		&i.Address,
		&i.ResearchDirection,
	)
	return i, err
}
