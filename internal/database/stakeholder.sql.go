// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: stakeholder.sql

package database

import (
	"context"
)

const createClient = `-- name: CreateClient :one

INSERT INTO clients (name, address, officephone, leaderid, contactname, contactphone) VALUES ($1, $2, $3, $4, $5, $6) RETURNING clientid
`

type CreateClientParams struct {
	Name         string
	Address      string
	Officephone  string
	Leaderid     int32
	Contactname  string
	Contactphone string
}

// ClientPart
func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Name,
		arg.Address,
		arg.Officephone,
		arg.Leaderid,
		arg.Contactname,
		arg.Contactphone,
	)
	var clientid int32
	err := row.Scan(&clientid)
	return clientid, err
}

const createLeader = `-- name: CreateLeader :one

INSERT INTO leaders (name, mobilephone, emailaddress) VALUES ($1, $2, $3) RETURNING leaderid
`

type CreateLeaderParams struct {
	Name         string
	Mobilephone  string
	Emailaddress string
}

// LeaderPart
func (q *Queries) CreateLeader(ctx context.Context, arg CreateLeaderParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createLeader, arg.Name, arg.Mobilephone, arg.Emailaddress)
	var leaderid int32
	err := row.Scan(&leaderid)
	return leaderid, err
}

const createPartner = `-- name: CreatePartner :one

INSERT INTO partners (name, address, officephone, leaderid, contactname, contactphone) VALUES ($1, $2, $3, $4, $5, $6) RETURNING partnerid
`

type CreatePartnerParams struct {
	Name         string
	Address      string
	Officephone  string
	Leaderid     int32
	Contactname  string
	Contactphone string
}

// PartnerPart
func (q *Queries) CreatePartner(ctx context.Context, arg CreatePartnerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPartner,
		arg.Name,
		arg.Address,
		arg.Officephone,
		arg.Leaderid,
		arg.Contactname,
		arg.Contactphone,
	)
	var partnerid int32
	err := row.Scan(&partnerid)
	return partnerid, err
}

const createQM = `-- name: CreateQM :one

INSERT INTO qualitymonitors (name, address, leaderid, contactname, contactphone) VALUES ($1, $2, $3, $4, $5) RETURNING monitorid
`

type CreateQMParams struct {
	Name         string
	Address      string
	Leaderid     int32
	Contactname  string
	Contactphone string
}

// QMPart
func (q *Queries) CreateQM(ctx context.Context, arg CreateQMParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createQM,
		arg.Name,
		arg.Address,
		arg.Leaderid,
		arg.Contactname,
		arg.Contactphone,
	)
	var monitorid int32
	err := row.Scan(&monitorid)
	return monitorid, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE clientid = $1
`

func (q *Queries) DeleteClient(ctx context.Context, clientid int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, clientid)
	return err
}

const deleteLeader = `-- name: DeleteLeader :exec
DELETE FROM leaders WHERE leaderid = $1
`

func (q *Queries) DeleteLeader(ctx context.Context, leaderid int32) error {
	_, err := q.db.ExecContext(ctx, deleteLeader, leaderid)
	return err
}

const deletePartner = `-- name: DeletePartner :exec
DELETE FROM partners WHERE partnerid = $1
`

func (q *Queries) DeletePartner(ctx context.Context, partnerid int32) error {
	_, err := q.db.ExecContext(ctx, deletePartner, partnerid)
	return err
}

const deleteQM = `-- name: DeleteQM :exec
DELETE FROM qualitymonitors WHERE monitorid = $1
`

func (q *Queries) DeleteQM(ctx context.Context, monitorid int32) error {
	_, err := q.db.ExecContext(ctx, deleteQM, monitorid)
	return err
}

const getClient = `-- name: GetClient :one
SELECT clientid, name, address, leaderid, officephone, contactname, contactphone FROM clients WHERE clientid = $1
`

func (q *Queries) GetClient(ctx context.Context, clientid int32) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, clientid)
	var i Client
	err := row.Scan(
		&i.Clientid,
		&i.Name,
		&i.Address,
		&i.Leaderid,
		&i.Officephone,
		&i.Contactname,
		&i.Contactphone,
	)
	return i, err
}

const getLeader = `-- name: GetLeader :one
SELECT leaderid, name, mobilephone, emailaddress FROM leaders WHERE leaderid = $1
`

func (q *Queries) GetLeader(ctx context.Context, leaderid int32) (Leader, error) {
	row := q.db.QueryRowContext(ctx, getLeader, leaderid)
	var i Leader
	err := row.Scan(
		&i.Leaderid,
		&i.Name,
		&i.Mobilephone,
		&i.Emailaddress,
	)
	return i, err
}

const getLeaderIdByInfo = `-- name: GetLeaderIdByInfo :one
SELECT leaderid FROM leaders WHERE name = $1 AND mobilephone = $2 AND emailaddress = $3
`

type GetLeaderIdByInfoParams struct {
	Name         string
	Mobilephone  string
	Emailaddress string
}

func (q *Queries) GetLeaderIdByInfo(ctx context.Context, arg GetLeaderIdByInfoParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getLeaderIdByInfo, arg.Name, arg.Mobilephone, arg.Emailaddress)
	var leaderid int32
	err := row.Scan(&leaderid)
	return leaderid, err
}

const getPartner = `-- name: GetPartner :one
SELECT partnerid, name, address, leaderid, officephone, contactname, contactphone FROM partners WHERE partnerid = $1
`

func (q *Queries) GetPartner(ctx context.Context, partnerid int32) (Partner, error) {
	row := q.db.QueryRowContext(ctx, getPartner, partnerid)
	var i Partner
	err := row.Scan(
		&i.Partnerid,
		&i.Name,
		&i.Address,
		&i.Leaderid,
		&i.Officephone,
		&i.Contactname,
		&i.Contactphone,
	)
	return i, err
}

const getQMById = `-- name: GetQMById :one
SELECT monitorid, name, address, leaderid, contactname, contactphone FROM qualitymonitors WHERE monitorid = $1
`

func (q *Queries) GetQMById(ctx context.Context, monitorid int32) (Qualitymonitor, error) {
	row := q.db.QueryRowContext(ctx, getQMById, monitorid)
	var i Qualitymonitor
	err := row.Scan(
		&i.Monitorid,
		&i.Name,
		&i.Address,
		&i.Leaderid,
		&i.Contactname,
		&i.Contactphone,
	)
	return i, err
}

const isLeaderExists = `-- name: IsLeaderExists :one
SELECT EXISTS(SELECT 1 FROM leaders WHERE name = $1 AND mobilephone = $2 AND emailaddress = $3) AS exists
`

type IsLeaderExistsParams struct {
	Name         string
	Mobilephone  string
	Emailaddress string
}

func (q *Queries) IsLeaderExists(ctx context.Context, arg IsLeaderExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isLeaderExists, arg.Name, arg.Mobilephone, arg.Emailaddress)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listClient = `-- name: ListClient :one
SELECT clientid, name, address, leaderid, officephone, contactname, contactphone FROM clients
`

func (q *Queries) ListClient(ctx context.Context) (Client, error) {
	row := q.db.QueryRowContext(ctx, listClient)
	var i Client
	err := row.Scan(
		&i.Clientid,
		&i.Name,
		&i.Address,
		&i.Leaderid,
		&i.Officephone,
		&i.Contactname,
		&i.Contactphone,
	)
	return i, err
}

const listPartner = `-- name: ListPartner :many
SELECT partnerid, name, address, leaderid, officephone, contactname, contactphone FROM partners
`

func (q *Queries) ListPartner(ctx context.Context) ([]Partner, error) {
	rows, err := q.db.QueryContext(ctx, listPartner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partner
	for rows.Next() {
		var i Partner
		if err := rows.Scan(
			&i.Partnerid,
			&i.Name,
			&i.Address,
			&i.Leaderid,
			&i.Officephone,
			&i.Contactname,
			&i.Contactphone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQM = `-- name: ListQM :many
SELECT monitorid, name, address, leaderid, contactname, contactphone FROM qualitymonitors
`

func (q *Queries) ListQM(ctx context.Context) ([]Qualitymonitor, error) {
	rows, err := q.db.QueryContext(ctx, listQM)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Qualitymonitor
	for rows.Next() {
		var i Qualitymonitor
		if err := rows.Scan(
			&i.Monitorid,
			&i.Name,
			&i.Address,
			&i.Leaderid,
			&i.Contactname,
			&i.Contactphone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients SET name = $1, address = $2, officephone = $3, leaderid = $4, contactname = $5, contactphone = $6 WHERE clientid = $7 RETURNING clientid, name, address, leaderid, officephone, contactname, contactphone
`

type UpdateClientParams struct {
	Name         string
	Address      string
	Officephone  string
	Leaderid     int32
	Contactname  string
	Contactphone string
	Clientid     int32
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.Name,
		arg.Address,
		arg.Officephone,
		arg.Leaderid,
		arg.Contactname,
		arg.Contactphone,
		arg.Clientid,
	)
	var i Client
	err := row.Scan(
		&i.Clientid,
		&i.Name,
		&i.Address,
		&i.Leaderid,
		&i.Officephone,
		&i.Contactname,
		&i.Contactphone,
	)
	return i, err
}
