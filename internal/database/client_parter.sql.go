// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: client_parter.sql

package database

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one

INSERT INTO clients (name, address, leaderid, officephone) VALUES ($1, $2, $3, $4) 
RETURNING clientid
`

type CreateClientParams struct {
	Name        string
	Address     string
	Leaderid    int32
	Officephone string
}

// clients
func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Name,
		arg.Address,
		arg.Leaderid,
		arg.Officephone,
	)
	var clientid int32
	err := row.Scan(&clientid)
	return clientid, err
}

const createClientContact = `-- name: CreateClientContact :one

INSERT INTO contacts (name, officephone, mobilephone, emailaddress, baseclient) VALUES ($1, $2, $3, $4, $5) 
RETURNING contactid
`

type CreateClientContactParams struct {
	Name         string
	Officephone  string
	Mobilephone  string
	Emailaddress string
	Baseclient   sql.NullInt32
}

// contacts
func (q *Queries) CreateClientContact(ctx context.Context, arg CreateClientContactParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClientContact,
		arg.Name,
		arg.Officephone,
		arg.Mobilephone,
		arg.Emailaddress,
		arg.Baseclient,
	)
	var contactid int32
	err := row.Scan(&contactid)
	return contactid, err
}

const createLeader = `-- name: CreateLeader :one

INSERT INTO leaders (name, officephone, mobilephone, emailaddress) VALUES ($1, $2, $3, $4) 
RETURNING leaderid
`

type CreateLeaderParams struct {
	Name         string
	Officephone  sql.NullString
	Mobilephone  sql.NullString
	Emailaddress sql.NullString
}

// Leader
func (q *Queries) CreateLeader(ctx context.Context, arg CreateLeaderParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createLeader,
		arg.Name,
		arg.Officephone,
		arg.Mobilephone,
		arg.Emailaddress,
	)
	var leaderid int32
	err := row.Scan(&leaderid)
	return leaderid, err
}

const createPartner = `-- name: CreatePartner :one

INSERT INTO partners (name, address, leaderid, officephone) VALUES ($1, $2, $3, $4) 
RETURNING partnerid
`

type CreatePartnerParams struct {
	Name        string
	Address     string
	Leaderid    int32
	Officephone string
}

// partners
func (q *Queries) CreatePartner(ctx context.Context, arg CreatePartnerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPartner,
		arg.Name,
		arg.Address,
		arg.Leaderid,
		arg.Officephone,
	)
	var partnerid int32
	err := row.Scan(&partnerid)
	return partnerid, err
}

const createPartnerContact = `-- name: CreatePartnerContact :one
INSERT INTO contacts (name, officephone, mobilephone, emailaddress, basepartners) VALUES ($1, $2, $3, $4, $5)
RETURNING contactid
`

type CreatePartnerContactParams struct {
	Name         string
	Officephone  string
	Mobilephone  string
	Emailaddress string
	Basepartners sql.NullInt32
}

func (q *Queries) CreatePartnerContact(ctx context.Context, arg CreatePartnerContactParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPartnerContact,
		arg.Name,
		arg.Officephone,
		arg.Mobilephone,
		arg.Emailaddress,
		arg.Basepartners,
	)
	var contactid int32
	err := row.Scan(&contactid)
	return contactid, err
}

const createQualitymonitor = `-- name: CreateQualitymonitor :one

INSERT INTO qualitymonitors (name, address, leaderid) VALUES ($1, $2, $3) 
RETURNING monitorid
`

type CreateQualitymonitorParams struct {
	Name     string
	Address  string
	Leaderid int32
}

// qualitymonitors
func (q *Queries) CreateQualitymonitor(ctx context.Context, arg CreateQualitymonitorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createQualitymonitor, arg.Name, arg.Address, arg.Leaderid)
	var monitorid int32
	err := row.Scan(&monitorid)
	return monitorid, err
}

const createQualitymonitorContact = `-- name: CreateQualitymonitorContact :one
INSERT INTO contacts (name, officephone, mobilephone, emailaddress, baseqm) VALUES ($1, $2, $3, $4, $5)
RETURNING contactid
`

type CreateQualitymonitorContactParams struct {
	Name         string
	Officephone  string
	Mobilephone  string
	Emailaddress string
	Baseqm       sql.NullInt32
}

func (q *Queries) CreateQualitymonitorContact(ctx context.Context, arg CreateQualitymonitorContactParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createQualitymonitorContact,
		arg.Name,
		arg.Officephone,
		arg.Mobilephone,
		arg.Emailaddress,
		arg.Baseqm,
	)
	var contactid int32
	err := row.Scan(&contactid)
	return contactid, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE clientid = $1
`

func (q *Queries) DeleteClient(ctx context.Context, clientid int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, clientid)
	return err
}

const deleteClientContact = `-- name: DeleteClientContact :exec
DELETE FROM contacts WHERE contactid = $1
`

func (q *Queries) DeleteClientContact(ctx context.Context, contactid int32) error {
	_, err := q.db.ExecContext(ctx, deleteClientContact, contactid)
	return err
}

const deleteLeader = `-- name: DeleteLeader :exec
DELETE FROM leaders WHERE leaderid = $1
`

func (q *Queries) DeleteLeader(ctx context.Context, leaderid int32) error {
	_, err := q.db.ExecContext(ctx, deleteLeader, leaderid)
	return err
}

const deletePartner = `-- name: DeletePartner :exec
DELETE FROM partners WHERE partnerid = $1
`

func (q *Queries) DeletePartner(ctx context.Context, partnerid int32) error {
	_, err := q.db.ExecContext(ctx, deletePartner, partnerid)
	return err
}

const deletePartnerContact = `-- name: DeletePartnerContact :exec
DELETE FROM contacts WHERE contactid = $1
`

func (q *Queries) DeletePartnerContact(ctx context.Context, contactid int32) error {
	_, err := q.db.ExecContext(ctx, deletePartnerContact, contactid)
	return err
}

const deleteQualitymonitor = `-- name: DeleteQualitymonitor :exec
DELETE FROM qualitymonitors WHERE monitorid = $1
`

func (q *Queries) DeleteQualitymonitor(ctx context.Context, monitorid int32) error {
	_, err := q.db.ExecContext(ctx, deleteQualitymonitor, monitorid)
	return err
}

const deleteQualitymonitorContact = `-- name: DeleteQualitymonitorContact :exec
DELETE FROM contacts WHERE contactid = $1
`

func (q *Queries) DeleteQualitymonitorContact(ctx context.Context, contactid int32) error {
	_, err := q.db.ExecContext(ctx, deleteQualitymonitorContact, contactid)
	return err
}

const listClientAll = `-- name: ListClientAll :many
SELECT clientid, name, address, leaderid, officephone FROM clients
`

func (q *Queries) ListClientAll(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClientAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.Clientid,
			&i.Name,
			&i.Address,
			&i.Leaderid,
			&i.Officephone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientContact = `-- name: ListClientContact :many
SELECT contactid, name, officephone, mobilephone, emailaddress, baseclient, basepartners, baseqm FROM contacts WHERE baseclient = $1
`

func (q *Queries) ListClientContact(ctx context.Context, baseclient sql.NullInt32) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listClientContact, baseclient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.Contactid,
			&i.Name,
			&i.Officephone,
			&i.Mobilephone,
			&i.Emailaddress,
			&i.Baseclient,
			&i.Basepartners,
			&i.Baseqm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeader = `-- name: ListLeader :one
SELECT leaderid, name, officephone, mobilephone, emailaddress FROM leaders WHERE leaderid = $1
`

func (q *Queries) ListLeader(ctx context.Context, leaderid int32) (Leader, error) {
	row := q.db.QueryRowContext(ctx, listLeader, leaderid)
	var i Leader
	err := row.Scan(
		&i.Leaderid,
		&i.Name,
		&i.Officephone,
		&i.Mobilephone,
		&i.Emailaddress,
	)
	return i, err
}

const listLeaderAll = `-- name: ListLeaderAll :many
SELECT leaderid, name, officephone, mobilephone, emailaddress FROM leaders
`

func (q *Queries) ListLeaderAll(ctx context.Context) ([]Leader, error) {
	rows, err := q.db.QueryContext(ctx, listLeaderAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leader
	for rows.Next() {
		var i Leader
		if err := rows.Scan(
			&i.Leaderid,
			&i.Name,
			&i.Officephone,
			&i.Mobilephone,
			&i.Emailaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPartnerAll = `-- name: ListPartnerAll :many
SELECT partnerid, name, address, leaderid, officephone FROM partners
`

func (q *Queries) ListPartnerAll(ctx context.Context) ([]Partner, error) {
	rows, err := q.db.QueryContext(ctx, listPartnerAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partner
	for rows.Next() {
		var i Partner
		if err := rows.Scan(
			&i.Partnerid,
			&i.Name,
			&i.Address,
			&i.Leaderid,
			&i.Officephone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPartnerContact = `-- name: ListPartnerContact :many
SELECT contactid, name, officephone, mobilephone, emailaddress, baseclient, basepartners, baseqm FROM contacts WHERE basepartners = $1
`

func (q *Queries) ListPartnerContact(ctx context.Context, basepartners sql.NullInt32) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listPartnerContact, basepartners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.Contactid,
			&i.Name,
			&i.Officephone,
			&i.Mobilephone,
			&i.Emailaddress,
			&i.Baseclient,
			&i.Basepartners,
			&i.Baseqm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQualitymonitorAll = `-- name: ListQualitymonitorAll :many
SELECT monitorid, name, address, leaderid FROM qualitymonitors
`

func (q *Queries) ListQualitymonitorAll(ctx context.Context) ([]Qualitymonitor, error) {
	rows, err := q.db.QueryContext(ctx, listQualitymonitorAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Qualitymonitor
	for rows.Next() {
		var i Qualitymonitor
		if err := rows.Scan(
			&i.Monitorid,
			&i.Name,
			&i.Address,
			&i.Leaderid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQualitymonitorContact = `-- name: ListQualitymonitorContact :many
SELECT contactid, name, officephone, mobilephone, emailaddress, baseclient, basepartners, baseqm FROM contacts WHERE baseqm = $1
`

func (q *Queries) ListQualitymonitorContact(ctx context.Context, baseqm sql.NullInt32) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listQualitymonitorContact, baseqm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.Contactid,
			&i.Name,
			&i.Officephone,
			&i.Mobilephone,
			&i.Emailaddress,
			&i.Baseclient,
			&i.Basepartners,
			&i.Baseqm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
