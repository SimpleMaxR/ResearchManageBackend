// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: person.sql

package database

import (
	"context"
)

const createResearcher = `-- name: CreateResearcher :one
INSERT INTO Researchers (lab_id, researcher_number, Name, Gender, Title, Age, emailaddress, Leader, startdate, term, researchDirection) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING ResearcherID
`

type CreateResearcherParams struct {
	LabID             int32
	ResearcherNumber  string
	Name              string
	Gender            string
	Title             string
	Age               int32
	Emailaddress      string
	Leader            bool
	Startdate         string
	Term              int32
	Researchdirection string
}

func (q *Queries) CreateResearcher(ctx context.Context, arg CreateResearcherParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createResearcher,
		arg.LabID,
		arg.ResearcherNumber,
		arg.Name,
		arg.Gender,
		arg.Title,
		arg.Age,
		arg.Emailaddress,
		arg.Leader,
		arg.Startdate,
		arg.Term,
		arg.Researchdirection,
	)
	var researcherid int32
	err := row.Scan(&researcherid)
	return researcherid, err
}

const deleteResearcher = `-- name: DeleteResearcher :one
DELETE FROM Researchers WHERE ResearcherID = $1
RETURNING researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection
`

func (q *Queries) DeleteResearcher(ctx context.Context, researcherid int32) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, deleteResearcher, researcherid)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const listResearcher = `-- name: ListResearcher :one
SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers WHERE ResearcherID = $1
`

func (q *Queries) ListResearcher(ctx context.Context, researcherid int32) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, listResearcher, researcherid)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const listResearcherAll = `-- name: ListResearcherAll :many

SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers
`

// Researcher queries
func (q *Queries) ListResearcherAll(ctx context.Context) ([]Researcher, error) {
	rows, err := q.db.QueryContext(ctx, listResearcherAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researcher
	for rows.Next() {
		var i Researcher
		if err := rows.Scan(
			&i.Researcherid,
			&i.LabID,
			&i.ResearcherNumber,
			&i.Name,
			&i.Gender,
			&i.Title,
			&i.Age,
			&i.Emailaddress,
			&i.Leader,
			&i.Startdate,
			&i.Term,
			&i.Researchdirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResearcherByID = `-- name: ListResearcherByID :one
SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers WHERE ResearcherID = $1
`

func (q *Queries) ListResearcherByID(ctx context.Context, researcherid int32) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, listResearcherByID, researcherid)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const listResearcherByLab = `-- name: ListResearcherByLab :many
SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers WHERE lab_id = $1
`

func (q *Queries) ListResearcherByLab(ctx context.Context, labID int32) ([]Researcher, error) {
	rows, err := q.db.QueryContext(ctx, listResearcherByLab, labID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researcher
	for rows.Next() {
		var i Researcher
		if err := rows.Scan(
			&i.Researcherid,
			&i.LabID,
			&i.ResearcherNumber,
			&i.Name,
			&i.Gender,
			&i.Title,
			&i.Age,
			&i.Emailaddress,
			&i.Leader,
			&i.Startdate,
			&i.Term,
			&i.Researchdirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResearcher = `-- name: UpdateResearcher :one
UPDATE Researchers SET lab_id = $1, Name = $2, Gender = $3, Title = $4, Age = $5, ResearchDirection = $6, Leader = $7 WHERE ResearcherID = $8
RETURNING researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection
`

type UpdateResearcherParams struct {
	LabID             int32
	Name              string
	Gender            string
	Title             string
	Age               int32
	Researchdirection string
	Leader            bool
	Researcherid      int32
}

func (q *Queries) UpdateResearcher(ctx context.Context, arg UpdateResearcherParams) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, updateResearcher,
		arg.LabID,
		arg.Name,
		arg.Gender,
		arg.Title,
		arg.Age,
		arg.Researchdirection,
		arg.Leader,
		arg.Researcherid,
	)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}
