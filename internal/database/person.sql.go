// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: person.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createResearcher = `-- name: CreateResearcher :one
INSERT INTO Researchers (lab_id, researcher_number, Name, Gender, Title, Age, emailaddress, Leader, startdate, term, researchDirection) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING ResearcherID
`

type CreateResearcherParams struct {
	LabID             int32
	ResearcherNumber  string
	Name              string
	Gender            string
	Title             string
	Age               int32
	Emailaddress      string
	Leader            bool
	Startdate         sql.NullTime
	Term              sql.NullInt32
	Researchdirection string
}

func (q *Queries) CreateResearcher(ctx context.Context, arg CreateResearcherParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createResearcher,
		arg.LabID,
		arg.ResearcherNumber,
		arg.Name,
		arg.Gender,
		arg.Title,
		arg.Age,
		arg.Emailaddress,
		arg.Leader,
		arg.Startdate,
		arg.Term,
		arg.Researchdirection,
	)
	var researcherid int32
	err := row.Scan(&researcherid)
	return researcherid, err
}

const createSecretaries = `-- name: CreateSecretaries :one
INSERT INTO Secretaries (Name, Gender, Age, MobilePhone, EmailAddress) VALUES ($1, $2, $3, $4, $5)
RETURNING SecretaryID
`

type CreateSecretariesParams struct {
	Name         string
	Gender       string
	Age          int32
	Mobilephone  string
	Emailaddress string
}

func (q *Queries) CreateSecretaries(ctx context.Context, arg CreateSecretariesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSecretaries,
		arg.Name,
		arg.Gender,
		arg.Age,
		arg.Mobilephone,
		arg.Emailaddress,
	)
	var secretaryid int32
	err := row.Scan(&secretaryid)
	return secretaryid, err
}

const createSecretaryServices = `-- name: CreateSecretaryServices :one
INSERT INTO SecretaryServices (SecretaryID, lab_id, EmploymentDate, Responsibilities) VALUES ($1, $2, $3, $4)
RETURNING secretaryid, lab_id, employmentdate, responsibilities
`

type CreateSecretaryServicesParams struct {
	Secretaryid      int32
	LabID            int32
	Employmentdate   time.Time
	Responsibilities string
}

func (q *Queries) CreateSecretaryServices(ctx context.Context, arg CreateSecretaryServicesParams) (Secretaryservice, error) {
	row := q.db.QueryRowContext(ctx, createSecretaryServices,
		arg.Secretaryid,
		arg.LabID,
		arg.Employmentdate,
		arg.Responsibilities,
	)
	var i Secretaryservice
	err := row.Scan(
		&i.Secretaryid,
		&i.LabID,
		&i.Employmentdate,
		&i.Responsibilities,
	)
	return i, err
}

const deleteResearcher = `-- name: DeleteResearcher :one
DELETE FROM Researchers WHERE ResearcherID = $1
RETURNING researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection
`

func (q *Queries) DeleteResearcher(ctx context.Context, researcherid int32) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, deleteResearcher, researcherid)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const deleteSecretary = `-- name: DeleteSecretary :exec
DELETE FROM Secretaries WHERE SecretaryID = $1
`

func (q *Queries) DeleteSecretary(ctx context.Context, secretaryid int32) error {
	_, err := q.db.ExecContext(ctx, deleteSecretary, secretaryid)
	return err
}

const deleteSecretaryService = `-- name: DeleteSecretaryService :exec
DELETE FROM SecretaryServices WHERE SecretaryID = $1 AND lab_id = $2
`

type DeleteSecretaryServiceParams struct {
	Secretaryid int32
	LabID       int32
}

func (q *Queries) DeleteSecretaryService(ctx context.Context, arg DeleteSecretaryServiceParams) error {
	_, err := q.db.ExecContext(ctx, deleteSecretaryService, arg.Secretaryid, arg.LabID)
	return err
}

const listResearcher = `-- name: ListResearcher :one
SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers WHERE ResearcherID = $1
`

func (q *Queries) ListResearcher(ctx context.Context, researcherid int32) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, listResearcher, researcherid)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const listResearcherAll = `-- name: ListResearcherAll :many

SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers
`

// Researcher queries
func (q *Queries) ListResearcherAll(ctx context.Context) ([]Researcher, error) {
	rows, err := q.db.QueryContext(ctx, listResearcherAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researcher
	for rows.Next() {
		var i Researcher
		if err := rows.Scan(
			&i.Researcherid,
			&i.LabID,
			&i.ResearcherNumber,
			&i.Name,
			&i.Gender,
			&i.Title,
			&i.Age,
			&i.Emailaddress,
			&i.Leader,
			&i.Startdate,
			&i.Term,
			&i.Researchdirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResearcherByLab = `-- name: ListResearcherByLab :many
SELECT researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection FROM Researchers WHERE lab_id = $1
`

func (q *Queries) ListResearcherByLab(ctx context.Context, labID int32) ([]Researcher, error) {
	rows, err := q.db.QueryContext(ctx, listResearcherByLab, labID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Researcher
	for rows.Next() {
		var i Researcher
		if err := rows.Scan(
			&i.Researcherid,
			&i.LabID,
			&i.ResearcherNumber,
			&i.Name,
			&i.Gender,
			&i.Title,
			&i.Age,
			&i.Emailaddress,
			&i.Leader,
			&i.Startdate,
			&i.Term,
			&i.Researchdirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretaryAll = `-- name: ListSecretaryAll :many









SELECT secretaryid, name, gender, age, mobilephone, emailaddress FROM Secretaries
`

// -- Director queries
// -- name: ListDirectorAll :many
// SELECT * FROM Directors;
// -- name: ListDirector :one
// SELECT * FROM Directors WHERE DirectorID = $1;
// -- name: CreateDirector :one
// INSERT INTO Directors (lab_id, StartDate, Term) VALUES ($1, $2, $3)
// RETURNING DirectorID;
// -- name: setResearcherDirector :one
// UPDATE Researchers SET Leader = true WHERE ResearcherID = $1
// RETURNING *;
// -- name: unsetResearcherDirector :one
// UPDATE Researchers SET Leader = false WHERE ResearcherID = $1
// RETURNING *;
// -- name: UpdateDirector :one
// UPDATE Directors SET lab_id = $1, StartDate = $2, Term = $3 WHERE DirectorID = $4
// RETURNING *;
// Secretary queries
func (q *Queries) ListSecretaryAll(ctx context.Context) ([]Secretary, error) {
	rows, err := q.db.QueryContext(ctx, listSecretaryAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretary
	for rows.Next() {
		var i Secretary
		if err := rows.Scan(
			&i.Secretaryid,
			&i.Name,
			&i.Gender,
			&i.Age,
			&i.Mobilephone,
			&i.Emailaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretaryServiceByLab = `-- name: ListSecretaryServiceByLab :many
SELECT secretaryid, lab_id, employmentdate, responsibilities FROM SecretaryServices WHERE lab_id = $1
`

func (q *Queries) ListSecretaryServiceByLab(ctx context.Context, labID int32) ([]Secretaryservice, error) {
	rows, err := q.db.QueryContext(ctx, listSecretaryServiceByLab, labID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretaryservice
	for rows.Next() {
		var i Secretaryservice
		if err := rows.Scan(
			&i.Secretaryid,
			&i.LabID,
			&i.Employmentdate,
			&i.Responsibilities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretaryServiceBySID = `-- name: ListSecretaryServiceBySID :many
SELECT secretaryid, lab_id, employmentdate, responsibilities FROM SecretaryServices WHERE SecretaryID = $1
`

func (q *Queries) ListSecretaryServiceBySID(ctx context.Context, secretaryid int32) ([]Secretaryservice, error) {
	rows, err := q.db.QueryContext(ctx, listSecretaryServiceBySID, secretaryid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretaryservice
	for rows.Next() {
		var i Secretaryservice
		if err := rows.Scan(
			&i.Secretaryid,
			&i.LabID,
			&i.Employmentdate,
			&i.Responsibilities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResearcher = `-- name: UpdateResearcher :one
UPDATE Researchers SET lab_id = $1, Name = $2, Gender = $3, Title = $4, Age = $5, ResearchDirection = $6, Leader = $7 WHERE ResearcherID = $8
RETURNING researcherid, lab_id, researcher_number, name, gender, title, age, emailaddress, leader, startdate, term, researchdirection
`

type UpdateResearcherParams struct {
	LabID             int32
	Name              string
	Gender            string
	Title             string
	Age               int32
	Researchdirection string
	Leader            bool
	Researcherid      int32
}

func (q *Queries) UpdateResearcher(ctx context.Context, arg UpdateResearcherParams) (Researcher, error) {
	row := q.db.QueryRowContext(ctx, updateResearcher,
		arg.LabID,
		arg.Name,
		arg.Gender,
		arg.Title,
		arg.Age,
		arg.Researchdirection,
		arg.Leader,
		arg.Researcherid,
	)
	var i Researcher
	err := row.Scan(
		&i.Researcherid,
		&i.LabID,
		&i.ResearcherNumber,
		&i.Name,
		&i.Gender,
		&i.Title,
		&i.Age,
		&i.Emailaddress,
		&i.Leader,
		&i.Startdate,
		&i.Term,
		&i.Researchdirection,
	)
	return i, err
}

const updateSecretaries = `-- name: UpdateSecretaries :one
UPDATE Secretaries SET Name = $1, Gender = $2, Age = $3, MobilePhone = $4, EmailAddress = $5 WHERE SecretaryID = $6
RETURNING secretaryid, name, gender, age, mobilephone, emailaddress
`

type UpdateSecretariesParams struct {
	Name         string
	Gender       string
	Age          int32
	Mobilephone  string
	Emailaddress string
	Secretaryid  int32
}

func (q *Queries) UpdateSecretaries(ctx context.Context, arg UpdateSecretariesParams) (Secretary, error) {
	row := q.db.QueryRowContext(ctx, updateSecretaries,
		arg.Name,
		arg.Gender,
		arg.Age,
		arg.Mobilephone,
		arg.Emailaddress,
		arg.Secretaryid,
	)
	var i Secretary
	err := row.Scan(
		&i.Secretaryid,
		&i.Name,
		&i.Gender,
		&i.Age,
		&i.Mobilephone,
		&i.Emailaddress,
	)
	return i, err
}

const updateSecretaryService = `-- name: UpdateSecretaryService :one
UPDATE SecretaryServices SET EmploymentDate = $1, Responsibilities = $2 WHERE SecretaryID = $3 AND lab_id = $4
RETURNING secretaryid, lab_id, employmentdate, responsibilities
`

type UpdateSecretaryServiceParams struct {
	Employmentdate   time.Time
	Responsibilities string
	Secretaryid      int32
	LabID            int32
}

func (q *Queries) UpdateSecretaryService(ctx context.Context, arg UpdateSecretaryServiceParams) (Secretaryservice, error) {
	row := q.db.QueryRowContext(ctx, updateSecretaryService,
		arg.Employmentdate,
		arg.Responsibilities,
		arg.Secretaryid,
		arg.LabID,
	)
	var i Secretaryservice
	err := row.Scan(
		&i.Secretaryid,
		&i.LabID,
		&i.Employmentdate,
		&i.Responsibilities,
	)
	return i, err
}
