// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: office.sql

package database

import (
	"context"
)

const createOffice = `-- name: CreateOffice :one
INSERT INTO offices (lab_id, area, address, managerid) VALUES ($1, $2, $3, $4)
RETURNING officeid
`

type CreateOfficeParams struct {
	LabID     int32
	Area      float64
	Address   string
	Managerid int32
}

func (q *Queries) CreateOffice(ctx context.Context, arg CreateOfficeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createOffice,
		arg.LabID,
		arg.Area,
		arg.Address,
		arg.Managerid,
	)
	var officeid int32
	err := row.Scan(&officeid)
	return officeid, err
}

const deleteOffice = `-- name: DeleteOffice :exec
DELETE FROM offices WHERE officeid = $1
`

func (q *Queries) DeleteOffice(ctx context.Context, officeid int32) error {
	_, err := q.db.ExecContext(ctx, deleteOffice, officeid)
	return err
}

const getOfficeByLab = `-- name: GetOfficeByLab :one
SELECT officeid, lab_id, area, address, managerid FROM offices WHERE lab_id = $1
`

func (q *Queries) GetOfficeByLab(ctx context.Context, labID int32) (Office, error) {
	row := q.db.QueryRowContext(ctx, getOfficeByLab, labID)
	var i Office
	err := row.Scan(
		&i.Officeid,
		&i.LabID,
		&i.Area,
		&i.Address,
		&i.Managerid,
	)
	return i, err
}

const listOfficeAll = `-- name: ListOfficeAll :many
SELECT officeid, lab_id, area, address, managerid FROM offices
`

func (q *Queries) ListOfficeAll(ctx context.Context) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, listOfficeAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Office
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.Officeid,
			&i.LabID,
			&i.Area,
			&i.Address,
			&i.Managerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOfficeByLabID = `-- name: ListOfficeByLabID :many
SELECT officeid, lab_id, area, address, managerid FROM offices WHERE lab_id = $1
`

func (q *Queries) ListOfficeByLabID(ctx context.Context, labID int32) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, listOfficeByLabID, labID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Office
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.Officeid,
			&i.LabID,
			&i.Area,
			&i.Address,
			&i.Managerid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffice = `-- name: UpdateOffice :one
UPDATE offices SET lab_id = $2, area = $3, address = $4, managerid = $5 WHERE officeid = $1
RETURNING officeid, lab_id, area, address, managerid
`

type UpdateOfficeParams struct {
	Officeid  int32
	LabID     int32
	Area      float64
	Address   string
	Managerid int32
}

func (q *Queries) UpdateOffice(ctx context.Context, arg UpdateOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, updateOffice,
		arg.Officeid,
		arg.LabID,
		arg.Area,
		arg.Address,
		arg.Managerid,
	)
	var i Office
	err := row.Scan(
		&i.Officeid,
		&i.LabID,
		&i.Area,
		&i.Address,
		&i.Managerid,
	)
	return i, err
}
